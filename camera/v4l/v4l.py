# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_v4l', [dirname(__file__)])
        except ImportError:
            import _v4l
            return _v4l
        if fp is not None:
            try:
                _mod = imp.load_module('_v4l', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _v4l = swig_import_helper()
    del swig_import_helper
else:
    import _v4l
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MAXDEPTH = _v4l.MAXDEPTH
class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _v4l.new_Device(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _v4l.delete_Device
    __del__ = lambda self : None;
    def initialize(self, *args): return _v4l.Device_initialize(self, *args)
    def getRGB(self): return _v4l.Device_getRGB(self)
    def setRGB(self, *args): return _v4l.Device_setRGB(self, *args)
    def getWidth(self): return _v4l.Device_getWidth(self)
    def getHeight(self): return _v4l.Device_getHeight(self)
    def getDepth(self): return _v4l.Device_getDepth(self)
    def getImage(self): return _v4l.Device_getImage(self)
    def getByte(self, *args): return _v4l.Device_getByte(self, *args)
Device_swigregister = _v4l.Device_swigregister
Device_swigregister(Device)

class V4L(Device):
    __swig_setmethods__ = {}
    for _s in [Device]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, V4L, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, V4L, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _v4l.new_V4L(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _v4l.delete_V4L
    __del__ = lambda self : None;
    def updateMMap(self): return _v4l.V4L_updateMMap(self)
    def init(self): return _v4l.V4L_init(self)
    def swap_rgb24(self, *args): return _v4l.V4L_swap_rgb24(self, *args)
    __swig_setmethods__["device"] = _v4l.V4L_device_set
    __swig_getmethods__["device"] = _v4l.V4L_device_get
    if _newclass:device = _swig_property(_v4l.V4L_device_get, _v4l.V4L_device_set)
    __swig_setmethods__["channel"] = _v4l.V4L_channel_set
    __swig_getmethods__["channel"] = _v4l.V4L_channel_get
    if _newclass:channel = _swig_property(_v4l.V4L_channel_get, _v4l.V4L_channel_set)
V4L_swigregister = _v4l.V4L_swigregister
V4L_swigregister(V4L)



