# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fourway', [dirname(__file__)])
        except ImportError:
            import _fourway
            return _fourway
        if fp is not None:
            try:
                _mod = imp.load_module('_fourway', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fourway = swig_import_helper()
    del swig_import_helper
else:
    import _fourway
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_fourway.MAXDEPTH_swigconstant(_fourway)
MAXDEPTH = _fourway.MAXDEPTH
class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fourway.new_Device(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _fourway.delete_Device
    __del__ = lambda self: None

    def initialize(self, wi, he, de, r, g, b):
        return _fourway.Device_initialize(self, wi, he, de, r, g, b)

    def getRGB(self):
        return _fourway.Device_getRGB(self)

    def setRGB(self, r, g, b):
        return _fourway.Device_setRGB(self, r, g, b)

    def getWidth(self):
        return _fourway.Device_getWidth(self)

    def getHeight(self):
        return _fourway.Device_getHeight(self)

    def getDepth(self):
        return _fourway.Device_getDepth(self)

    def getImage(self):
        return _fourway.Device_getImage(self)

    def getByte(self, position):
        return _fourway.Device_getByte(self, position)
Device_swigregister = _fourway.Device_swigregister
Device_swigregister(Device)

class Fourway(Device):
    __swig_setmethods__ = {}
    for _s in [Device]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fourway, name, value)
    __swig_getmethods__ = {}
    for _s in [Device]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Fourway, name)
    __repr__ = _swig_repr
    __swig_setmethods__["otherimage"] = _fourway.Fourway_otherimage_set
    __swig_getmethods__["otherimage"] = _fourway.Fourway_otherimage_get
    if _newclass:
        otherimage = _swig_property(_fourway.Fourway_otherimage_get, _fourway.Fourway_otherimage_set)
    __swig_setmethods__["otherwidth"] = _fourway.Fourway_otherwidth_set
    __swig_getmethods__["otherwidth"] = _fourway.Fourway_otherwidth_get
    if _newclass:
        otherwidth = _swig_property(_fourway.Fourway_otherwidth_get, _fourway.Fourway_otherwidth_set)
    __swig_setmethods__["otherheight"] = _fourway.Fourway_otherheight_set
    __swig_getmethods__["otherheight"] = _fourway.Fourway_otherheight_get
    if _newclass:
        otherheight = _swig_property(_fourway.Fourway_otherheight_get, _fourway.Fourway_otherheight_set)
    __swig_setmethods__["otherdepth"] = _fourway.Fourway_otherdepth_set
    __swig_getmethods__["otherdepth"] = _fourway.Fourway_otherdepth_get
    if _newclass:
        otherdepth = _swig_property(_fourway.Fourway_otherdepth_get, _fourway.Fourway_otherdepth_set)
    __swig_setmethods__["quadNumber"] = _fourway.Fourway_quadNumber_set
    __swig_getmethods__["quadNumber"] = _fourway.Fourway_quadNumber_get
    if _newclass:
        quadNumber = _swig_property(_fourway.Fourway_quadNumber_get, _fourway.Fourway_quadNumber_set)
    __swig_setmethods__["rotate"] = _fourway.Fourway_rotate_set
    __swig_getmethods__["rotate"] = _fourway.Fourway_rotate_get
    if _newclass:
        rotate = _swig_property(_fourway.Fourway_rotate_get, _fourway.Fourway_rotate_set)

    def __init__(self, odev, splits, quad, rot=0):
        this = _fourway.new_Fourway(odev, splits, quad, rot)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def updateMMap(self):
        return _fourway.Fourway_updateMMap(self)
    __swig_destroy__ = _fourway.delete_Fourway
    __del__ = lambda self: None
Fourway_swigregister = _fourway.Fourway_swigregister
Fourway_swigregister(Fourway)

# This file is compatible with both classic and new-style classes.


