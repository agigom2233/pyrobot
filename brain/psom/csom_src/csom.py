# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csom', [dirname(__file__)])
        except ImportError:
            import _csom
            return _csom
        if fp is not None:
            try:
                _mod = imp.load_module('_csom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _csom = swig_import_helper()
    del swig_import_helper
else:
    import _csom
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_floatarray(*args):
  return _csom.new_floatarray(*args)
new_floatarray = _csom.new_floatarray

def delete_floatarray(*args):
  return _csom.delete_floatarray(*args)
delete_floatarray = _csom.delete_floatarray

def floatarray_getitem(*args):
  return _csom.floatarray_getitem(*args)
floatarray_getitem = _csom.floatarray_getitem

def floatarray_setitem(*args):
  return _csom.floatarray_setitem(*args)
floatarray_setitem = _csom.floatarray_setitem

def new_shortarray(*args):
  return _csom.new_shortarray(*args)
new_shortarray = _csom.new_shortarray

def delete_shortarray(*args):
  return _csom.delete_shortarray(*args)
delete_shortarray = _csom.delete_shortarray

def shortarray_getitem(*args):
  return _csom.shortarray_getitem(*args)
shortarray_getitem = _csom.shortarray_getitem

def shortarray_setitem(*args):
  return _csom.shortarray_setitem(*args)
shortarray_setitem = _csom.shortarray_setitem

def new_intarray(*args):
  return _csom.new_intarray(*args)
new_intarray = _csom.new_intarray

def delete_intarray(*args):
  return _csom.delete_intarray(*args)
delete_intarray = _csom.delete_intarray

def intarray_getitem(*args):
  return _csom.intarray_getitem(*args)
intarray_getitem = _csom.intarray_getitem

def intarray_setitem(*args):
  return _csom.intarray_setitem(*args)
intarray_setitem = _csom.intarray_setitem

def new_chararray(*args):
  return _csom.new_chararray(*args)
new_chararray = _csom.new_chararray

def delete_chararray(*args):
  return _csom.delete_chararray(*args)
delete_chararray = _csom.delete_chararray

def chararray_getitem(*args):
  return _csom.chararray_getitem(*args)
chararray_getitem = _csom.chararray_getitem

def chararray_setitem(*args):
  return _csom.chararray_setitem(*args)
chararray_setitem = _csom.chararray_setitem

def new_charstararray(*args):
  return _csom.new_charstararray(*args)
new_charstararray = _csom.new_charstararray

def delete_charstararray(*args):
  return _csom.delete_charstararray(*args)
delete_charstararray = _csom.delete_charstararray

def charstararray_getitem(*args):
  return _csom.charstararray_getitem(*args)
charstararray_getitem = _csom.charstararray_getitem

def charstararray_setitem(*args):
  return _csom.charstararray_setitem(*args)
charstararray_setitem = _csom.charstararray_setitem
CYCLIC = _csom.CYCLIC
RAND = _csom.RAND
LINEAR = _csom.LINEAR
INVERSE_T = _csom.INVERSE_T
NO_TRAIN = _csom.NO_TRAIN
TRAIN = _csom.TRAIN
REGULAR = _csom.REGULAR
CONSEC = _csom.CONSEC
MAX_CONSEC = _csom.MAX_CONSEC
TOPOL_HEXA = _csom.TOPOL_HEXA
TOPOL_RECT = _csom.TOPOL_RECT
NEIGH_BUBBLE = _csom.NEIGH_BUBBLE
NEIGH_GAUSSIAN = _csom.NEIGH_GAUSSIAN
class data_entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data_entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data_entry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["points"] = _csom.data_entry_points_set
    __swig_getmethods__["points"] = _csom.data_entry_points_get
    if _newclass:points = _swig_property(_csom.data_entry_points_get, _csom.data_entry_points_set)
    __swig_setmethods__["num_labs"] = _csom.data_entry_num_labs_set
    __swig_getmethods__["num_labs"] = _csom.data_entry_num_labs_get
    if _newclass:num_labs = _swig_property(_csom.data_entry_num_labs_get, _csom.data_entry_num_labs_set)
    __swig_setmethods__["weight"] = _csom.data_entry_weight_set
    __swig_getmethods__["weight"] = _csom.data_entry_weight_get
    if _newclass:weight = _swig_property(_csom.data_entry_weight_get, _csom.data_entry_weight_set)
    __swig_setmethods__["next"] = _csom.data_entry_next_set
    __swig_getmethods__["next"] = _csom.data_entry_next_get
    if _newclass:next = _swig_property(_csom.data_entry_next_get, _csom.data_entry_next_set)
    __swig_setmethods__["mask"] = _csom.data_entry_mask_set
    __swig_getmethods__["mask"] = _csom.data_entry_mask_get
    if _newclass:mask = _swig_property(_csom.data_entry_mask_get, _csom.data_entry_mask_set)
    __swig_setmethods__["fixed"] = _csom.data_entry_fixed_set
    __swig_getmethods__["fixed"] = _csom.data_entry_fixed_get
    if _newclass:fixed = _swig_property(_csom.data_entry_fixed_get, _csom.data_entry_fixed_set)
    __swig_getmethods__["lab"] = _csom.data_entry_lab_get
    if _newclass:lab = _swig_property(_csom.data_entry_lab_get)
    def __init__(self): 
        this = _csom.new_data_entry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csom.delete_data_entry
    __del__ = lambda self : None;
data_entry_swigregister = _csom.data_entry_swigregister
data_entry_swigregister(data_entry)

class data_entry_lab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data_entry_lab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data_entry_lab, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label_array"] = _csom.data_entry_lab_label_array_set
    __swig_getmethods__["label_array"] = _csom.data_entry_lab_label_array_get
    if _newclass:label_array = _swig_property(_csom.data_entry_lab_label_array_get, _csom.data_entry_lab_label_array_set)
    __swig_setmethods__["label"] = _csom.data_entry_lab_label_set
    __swig_getmethods__["label"] = _csom.data_entry_lab_label_get
    if _newclass:label = _swig_property(_csom.data_entry_lab_label_get, _csom.data_entry_lab_label_set)
    def __init__(self): 
        this = _csom.new_data_entry_lab()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csom.delete_data_entry_lab
    __del__ = lambda self : None;
data_entry_lab_swigregister = _csom.data_entry_lab_swigregister
data_entry_lab_swigregister(data_entry_lab)

class entries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, entries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, entries, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["dimension"] = _csom.entries_dimension_set
    __swig_getmethods__["dimension"] = _csom.entries_dimension_get
    if _newclass:dimension = _swig_property(_csom.entries_dimension_get, _csom.entries_dimension_set)
    __swig_setmethods__["topol"] = _csom.entries_topol_set
    __swig_getmethods__["topol"] = _csom.entries_topol_get
    if _newclass:topol = _swig_property(_csom.entries_topol_get, _csom.entries_topol_set)
    __swig_setmethods__["neigh"] = _csom.entries_neigh_set
    __swig_getmethods__["neigh"] = _csom.entries_neigh_get
    if _newclass:neigh = _swig_property(_csom.entries_neigh_get, _csom.entries_neigh_set)
    __swig_setmethods__["xdim"] = _csom.entries_xdim_set
    __swig_getmethods__["xdim"] = _csom.entries_xdim_get
    if _newclass:xdim = _swig_property(_csom.entries_xdim_get, _csom.entries_xdim_set)
    __swig_setmethods__["ydim"] = _csom.entries_ydim_set
    __swig_getmethods__["ydim"] = _csom.entries_ydim_get
    if _newclass:ydim = _swig_property(_csom.entries_ydim_get, _csom.entries_ydim_set)
    __swig_setmethods__["current"] = _csom.entries_current_set
    __swig_getmethods__["current"] = _csom.entries_current_get
    if _newclass:current = _swig_property(_csom.entries_current_get, _csom.entries_current_set)
    __swig_setmethods__["entries"] = _csom.entries_entries_set
    __swig_getmethods__["entries"] = _csom.entries_entries_get
    if _newclass:entries = _swig_property(_csom.entries_entries_get, _csom.entries_entries_set)
    __swig_setmethods__["num_loaded"] = _csom.entries_num_loaded_set
    __swig_getmethods__["num_loaded"] = _csom.entries_num_loaded_get
    if _newclass:num_loaded = _swig_property(_csom.entries_num_loaded_get, _csom.entries_num_loaded_set)
    __swig_setmethods__["num_entries"] = _csom.entries_num_entries_set
    __swig_getmethods__["num_entries"] = _csom.entries_num_entries_get
    if _newclass:num_entries = _swig_property(_csom.entries_num_entries_get, _csom.entries_num_entries_set)
    __swig_setmethods__["lap"] = _csom.entries_lap_set
    __swig_getmethods__["lap"] = _csom.entries_lap_get
    if _newclass:lap = _swig_property(_csom.entries_lap_get, _csom.entries_lap_set)
    __swig_setmethods__["fi"] = _csom.entries_fi_set
    __swig_getmethods__["fi"] = _csom.entries_fi_get
    if _newclass:fi = _swig_property(_csom.entries_fi_get, _csom.entries_fi_set)
    __swig_setmethods__["buffer"] = _csom.entries_buffer_set
    __swig_getmethods__["buffer"] = _csom.entries_buffer_get
    if _newclass:buffer = _swig_property(_csom.entries_buffer_get, _csom.entries_buffer_set)
    __swig_getmethods__["flags"] = _csom.entries_flags_get
    if _newclass:flags = _swig_property(_csom.entries_flags_get)
    __swig_destroy__ = _csom.delete_entries
    __del__ = lambda self : None;
entries_swigregister = _csom.entries_swigregister
entries_swigregister(entries)

class entries_flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, entries_flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, entries_flags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["loadmode"] = _csom.entries_flags_loadmode_set
    __swig_getmethods__["loadmode"] = _csom.entries_flags_loadmode_get
    if _newclass:loadmode = _swig_property(_csom.entries_flags_loadmode_get, _csom.entries_flags_loadmode_set)
    __swig_setmethods__["totlen_known"] = _csom.entries_flags_totlen_known_set
    __swig_getmethods__["totlen_known"] = _csom.entries_flags_totlen_known_get
    if _newclass:totlen_known = _swig_property(_csom.entries_flags_totlen_known_get, _csom.entries_flags_totlen_known_set)
    __swig_setmethods__["random_order"] = _csom.entries_flags_random_order_set
    __swig_getmethods__["random_order"] = _csom.entries_flags_random_order_get
    if _newclass:random_order = _swig_property(_csom.entries_flags_random_order_get, _csom.entries_flags_random_order_set)
    __swig_setmethods__["skip_empty"] = _csom.entries_flags_skip_empty_set
    __swig_getmethods__["skip_empty"] = _csom.entries_flags_skip_empty_get
    if _newclass:skip_empty = _swig_property(_csom.entries_flags_skip_empty_get, _csom.entries_flags_skip_empty_set)
    __swig_setmethods__["labels_needed"] = _csom.entries_flags_labels_needed_set
    __swig_getmethods__["labels_needed"] = _csom.entries_flags_labels_needed_get
    if _newclass:labels_needed = _swig_property(_csom.entries_flags_labels_needed_get, _csom.entries_flags_labels_needed_set)
    def __init__(self): 
        this = _csom.new_entries_flags()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csom.delete_entries_flags
    __del__ = lambda self : None;
entries_flags_swigregister = _csom.entries_flags_swigregister
entries_flags_swigregister(entries_flags)

class teach_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teach_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teach_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["topol"] = _csom.teach_params_topol_set
    __swig_getmethods__["topol"] = _csom.teach_params_topol_get
    if _newclass:topol = _swig_property(_csom.teach_params_topol_get, _csom.teach_params_topol_set)
    __swig_setmethods__["neigh"] = _csom.teach_params_neigh_set
    __swig_getmethods__["neigh"] = _csom.teach_params_neigh_get
    if _newclass:neigh = _swig_property(_csom.teach_params_neigh_get, _csom.teach_params_neigh_set)
    __swig_setmethods__["alpha_type"] = _csom.teach_params_alpha_type_set
    __swig_getmethods__["alpha_type"] = _csom.teach_params_alpha_type_get
    if _newclass:alpha_type = _swig_property(_csom.teach_params_alpha_type_get, _csom.teach_params_alpha_type_set)
    __swig_setmethods__["mapdist"] = _csom.teach_params_mapdist_set
    __swig_getmethods__["mapdist"] = _csom.teach_params_mapdist_get
    if _newclass:mapdist = _swig_property(_csom.teach_params_mapdist_get, _csom.teach_params_mapdist_set)
    __swig_setmethods__["dist"] = _csom.teach_params_dist_set
    __swig_getmethods__["dist"] = _csom.teach_params_dist_get
    if _newclass:dist = _swig_property(_csom.teach_params_dist_get, _csom.teach_params_dist_set)
    __swig_setmethods__["neigh_adapt"] = _csom.teach_params_neigh_adapt_set
    __swig_getmethods__["neigh_adapt"] = _csom.teach_params_neigh_adapt_get
    if _newclass:neigh_adapt = _swig_property(_csom.teach_params_neigh_adapt_get, _csom.teach_params_neigh_adapt_set)
    __swig_setmethods__["vector_adapt"] = _csom.teach_params_vector_adapt_set
    __swig_getmethods__["vector_adapt"] = _csom.teach_params_vector_adapt_get
    if _newclass:vector_adapt = _swig_property(_csom.teach_params_vector_adapt_get, _csom.teach_params_vector_adapt_set)
    __swig_setmethods__["winner"] = _csom.teach_params_winner_set
    __swig_getmethods__["winner"] = _csom.teach_params_winner_get
    if _newclass:winner = _swig_property(_csom.teach_params_winner_get, _csom.teach_params_winner_set)
    __swig_setmethods__["alpha_func"] = _csom.teach_params_alpha_func_set
    __swig_getmethods__["alpha_func"] = _csom.teach_params_alpha_func_get
    if _newclass:alpha_func = _swig_property(_csom.teach_params_alpha_func_get, _csom.teach_params_alpha_func_set)
    __swig_setmethods__["radius_func"] = _csom.teach_params_radius_func_set
    __swig_getmethods__["radius_func"] = _csom.teach_params_radius_func_get
    if _newclass:radius_func = _swig_property(_csom.teach_params_radius_func_get, _csom.teach_params_radius_func_set)
    __swig_setmethods__["radius"] = _csom.teach_params_radius_set
    __swig_getmethods__["radius"] = _csom.teach_params_radius_get
    if _newclass:radius = _swig_property(_csom.teach_params_radius_get, _csom.teach_params_radius_set)
    __swig_setmethods__["alpha"] = _csom.teach_params_alpha_set
    __swig_getmethods__["alpha"] = _csom.teach_params_alpha_get
    if _newclass:alpha = _swig_property(_csom.teach_params_alpha_get, _csom.teach_params_alpha_set)
    __swig_setmethods__["length"] = _csom.teach_params_length_set
    __swig_getmethods__["length"] = _csom.teach_params_length_get
    if _newclass:length = _swig_property(_csom.teach_params_length_get, _csom.teach_params_length_set)
    __swig_setmethods__["count"] = _csom.teach_params_count_set
    __swig_getmethods__["count"] = _csom.teach_params_count_get
    if _newclass:count = _swig_property(_csom.teach_params_count_get, _csom.teach_params_count_set)
    __swig_setmethods__["qerror"] = _csom.teach_params_qerror_set
    __swig_getmethods__["qerror"] = _csom.teach_params_qerror_get
    if _newclass:qerror = _swig_property(_csom.teach_params_qerror_get, _csom.teach_params_qerror_set)
    __swig_setmethods__["error_factor"] = _csom.teach_params_error_factor_set
    __swig_getmethods__["error_factor"] = _csom.teach_params_error_factor_get
    if _newclass:error_factor = _swig_property(_csom.teach_params_error_factor_get, _csom.teach_params_error_factor_set)
    __swig_setmethods__["knn"] = _csom.teach_params_knn_set
    __swig_getmethods__["knn"] = _csom.teach_params_knn_get
    if _newclass:knn = _swig_property(_csom.teach_params_knn_get, _csom.teach_params_knn_set)
    __swig_setmethods__["codes"] = _csom.teach_params_codes_set
    __swig_getmethods__["codes"] = _csom.teach_params_codes_get
    if _newclass:codes = _swig_property(_csom.teach_params_codes_get, _csom.teach_params_codes_set)
    __swig_setmethods__["data"] = _csom.teach_params_data_set
    __swig_getmethods__["data"] = _csom.teach_params_data_get
    if _newclass:data = _swig_property(_csom.teach_params_data_get, _csom.teach_params_data_set)
    __swig_setmethods__["snapshot"] = _csom.teach_params_snapshot_set
    __swig_getmethods__["snapshot"] = _csom.teach_params_snapshot_get
    if _newclass:snapshot = _swig_property(_csom.teach_params_snapshot_get, _csom.teach_params_snapshot_set)
    __swig_setmethods__["start_time"] = _csom.teach_params_start_time_set
    __swig_getmethods__["start_time"] = _csom.teach_params_start_time_get
    if _newclass:start_time = _swig_property(_csom.teach_params_start_time_get, _csom.teach_params_start_time_set)
    __swig_setmethods__["end_time"] = _csom.teach_params_end_time_set
    __swig_getmethods__["end_time"] = _csom.teach_params_end_time_get
    if _newclass:end_time = _swig_property(_csom.teach_params_end_time_get, _csom.teach_params_end_time_set)
    def __init__(self): 
        this = _csom.new_teach_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csom.delete_teach_params
    __del__ = lambda self : None;
teach_params_swigregister = _csom.teach_params_swigregister
teach_params_swigregister(teach_params)

class teach_params_counters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teach_params_counters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teach_params_counters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["teach"] = _csom.teach_params_counters_teach_set
    __swig_getmethods__["teach"] = _csom.teach_params_counters_teach_get
    if _newclass:teach = _swig_property(_csom.teach_params_counters_teach_get, _csom.teach_params_counters_teach_set)
    __swig_setmethods__["tcounters"] = _csom.teach_params_counters_tcounters_set
    __swig_getmethods__["tcounters"] = _csom.teach_params_counters_tcounters_get
    if _newclass:tcounters = _swig_property(_csom.teach_params_counters_tcounters_get, _csom.teach_params_counters_tcounters_set)
    __swig_setmethods__["mcounters"] = _csom.teach_params_counters_mcounters_set
    __swig_getmethods__["mcounters"] = _csom.teach_params_counters_mcounters_get
    if _newclass:mcounters = _swig_property(_csom.teach_params_counters_mcounters_get, _csom.teach_params_counters_mcounters_set)
    __swig_setmethods__["counters_xdim"] = _csom.teach_params_counters_counters_xdim_set
    __swig_getmethods__["counters_xdim"] = _csom.teach_params_counters_counters_xdim_get
    if _newclass:counters_xdim = _swig_property(_csom.teach_params_counters_counters_xdim_get, _csom.teach_params_counters_counters_xdim_set)
    __swig_setmethods__["counters_ydim"] = _csom.teach_params_counters_counters_ydim_set
    __swig_getmethods__["counters_ydim"] = _csom.teach_params_counters_counters_ydim_get
    if _newclass:counters_ydim = _swig_property(_csom.teach_params_counters_counters_ydim_get, _csom.teach_params_counters_counters_ydim_set)
    def __init__(self): 
        this = _csom.new_teach_params_counters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _csom.delete_teach_params_counters
    __del__ = lambda self : None;
teach_params_counters_swigregister = _csom.teach_params_counters_swigregister
teach_params_counters_swigregister(teach_params_counters)


def open_entries(*args):
  return _csom.open_entries(*args)
open_entries = _csom.open_entries

def close_entries(*args):
  return _csom.close_entries(*args)
close_entries = _csom.close_entries

def rewind_entries(*args):
  return _csom.rewind_entries(*args)
rewind_entries = _csom.rewind_entries

def next_entry(*args):
  return _csom.next_entry(*args)
next_entry = _csom.next_entry

def lininit_codes(*args):
  return _csom.lininit_codes(*args)
lininit_codes = _csom.lininit_codes

def randinit_codes(*args):
  return _csom.randinit_codes(*args)
randinit_codes = _csom.randinit_codes

def write_entries(*args):
  return _csom.write_entries(*args)
write_entries = _csom.write_entries

def set_globals():
  return _csom.set_globals()
set_globals = _csom.set_globals

def get_eptr():
  return _csom.get_eptr()
get_eptr = _csom.get_eptr

def free_eptr(*args):
  return _csom.free_eptr(*args)
free_eptr = _csom.free_eptr

def init_dataset(*args):
  return _csom.init_dataset(*args)
init_dataset = _csom.init_dataset

def free_dataset(*args):
  return _csom.free_dataset(*args)
free_dataset = _csom.free_dataset

def addto_dataset(*args):
  return _csom.addto_dataset(*args)
addto_dataset = _csom.addto_dataset

def make_data_entry_weighted_masked(*args):
  return _csom.make_data_entry_weighted_masked(*args)
make_data_entry_weighted_masked = _csom.make_data_entry_weighted_masked

def free_data_entry(*args):
  return _csom.free_data_entry(*args)
free_data_entry = _csom.free_data_entry

def make_data_entry(*args):
  return _csom.make_data_entry(*args)
make_data_entry = _csom.make_data_entry

def find_conv_to_ind(*args):
  return _csom.find_conv_to_ind(*args)
find_conv_to_ind = _csom.find_conv_to_ind

def find_conv_to_lab(*args):
  return _csom.find_conv_to_lab(*args)
find_conv_to_lab = _csom.find_conv_to_lab

def number_of_labels():
  return _csom.number_of_labels()
number_of_labels = _csom.number_of_labels

def free_labels():
  return _csom.free_labels()
free_labels = _csom.free_labels

def add_label_data_entry(*args):
  return _csom.add_label_data_entry(*args)
add_label_data_entry = _csom.add_label_data_entry

def clear_labels_data_entry(*args):
  return _csom.clear_labels_data_entry(*args)
clear_labels_data_entry = _csom.clear_labels_data_entry

def construct_teach_params(*args):
  return _csom.construct_teach_params(*args)
construct_teach_params = _csom.construct_teach_params

def free_teach_params(*args):
  return _csom.free_teach_params(*args)
free_teach_params = _csom.free_teach_params

def init_training_session(*args):
  return _csom.init_training_session(*args)
init_training_session = _csom.init_training_session

def setup_snapshot(*args):
  return _csom.setup_snapshot(*args)
setup_snapshot = _csom.setup_snapshot

def setup_counters(*args):
  return _csom.setup_counters(*args)
setup_counters = _csom.setup_counters

def free_counters(*args):
  return _csom.free_counters(*args)
free_counters = _csom.free_counters

def update_counters(*args):
  return _csom.update_counters(*args)
update_counters = _csom.update_counters

def get_reg_tcounter(*args):
  return _csom.get_reg_tcounter(*args)
get_reg_tcounter = _csom.get_reg_tcounter

def get_consec_tcounter(*args):
  return _csom.get_consec_tcounter(*args)
get_consec_tcounter = _csom.get_consec_tcounter

def get_maxconsec_tcounter(*args):
  return _csom.get_maxconsec_tcounter(*args)
get_maxconsec_tcounter = _csom.get_maxconsec_tcounter

def get_reg_mcounter(*args):
  return _csom.get_reg_mcounter(*args)
get_reg_mcounter = _csom.get_reg_mcounter

def get_consec_mcounter(*args):
  return _csom.get_consec_mcounter(*args)
get_consec_mcounter = _csom.get_consec_mcounter

def get_maxconsec_mcounter(*args):
  return _csom.get_maxconsec_mcounter(*args)
get_maxconsec_mcounter = _csom.get_maxconsec_mcounter

def get_counter(*args):
  return _csom.get_counter(*args)
get_counter = _csom.get_counter

def input_one(*args):
  return _csom.input_one(*args)
input_one = _csom.input_one

def map_one(*args):
  return _csom.map_one(*args)
map_one = _csom.map_one

def train_one(*args):
  return _csom.train_one(*args)
train_one = _csom.train_one

def train_fromdataset(*args):
  return _csom.train_fromdataset(*args)
train_fromdataset = _csom.train_fromdataset

def map_fromdataset(*args):
  return _csom.map_fromdataset(*args)
map_fromdataset = _csom.map_fromdataset

def timing_start(*args):
  return _csom.timing_start(*args)
timing_start = _csom.timing_start

def timing_stop(*args):
  return _csom.timing_stop(*args)
timing_stop = _csom.timing_stop

def get_training_time(*args):
  return _csom.get_training_time(*args)
get_training_time = _csom.get_training_time

def get_error(*args):
  return _csom.get_error(*args)
get_error = _csom.get_error

def get_activation_levels(*args):
  return _csom.get_activation_levels(*args)
get_activation_levels = _csom.get_activation_levels

def get_levels_by_error(*args):
  return _csom.get_levels_by_error(*args)
get_levels_by_error = _csom.get_levels_by_error

def get_model_vector(*args):
  return _csom.get_model_vector(*args)
get_model_vector = _csom.get_model_vector

def print_dataset(*args):
  return _csom.print_dataset(*args)
print_dataset = _csom.print_dataset

def get_mask_data_entry(*args):
  return _csom.get_mask_data_entry(*args)
get_mask_data_entry = _csom.get_mask_data_entry

def get_label_data_entry(*args):
  return _csom.get_label_data_entry(*args)
get_label_data_entry = _csom.get_label_data_entry


